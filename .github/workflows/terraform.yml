# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Deployment

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      # with:
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v39
      
    - name: Set working directory
      id: set-directory
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          DIR=$(dirname $file)
          if [ -f "$DIR/main.tf" ]; then
            echo "Working directory: $DIR"
            echo "working_dir=$DIR" >> $GITHUB_OUTPUT
            break
          fi
        done

        echo ${{ steps.set-directory.outputs.working_dir }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd ${{ steps.set-directory.outputs.working_dir }}
        terraform init

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check


    - name: Terraform Create secrets.tf
      env:  
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        cd ${{ steps.set-directory.outputs.working_dir }}

        cat << EOF >> secrets.tfvars                           
        access_key = "$ACCESS_KEY"
        secret_key = "$SECRET_KEY"
        EOF

    - name: Generate Terraform Key
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
      
      run: |
        mkdir ~/.ssh/
        cd ~/.ssh/
        touch id_rsa.pub
        cd
        echo "$SSH_KEY" > ~/.ssh/id_rsa.pub

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ steps.set-directory.outputs.working_dir }}

        terraform plan --var-file=secrets.tfvars -input=false
        rm -f secrets.tf

    - name: Update Pull Request
      uses: actions/github-script@v7
      env:  
        USER_TOKEN:   ${{ secrets.USER_TOKEN }}
      with:
        github-token: ${{ secrets.USER_TOKEN }}
        script: |
          const sanitizedOutput = `${{ steps.plan.outputs.stdout }}`.replace(/\x1b\[[0-9;]*[a-zA-Z]/g, '');
          
          const output = `
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
        
          \`\`\`
          ${sanitizedOutput}
          \`\`\`
        
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
        
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
